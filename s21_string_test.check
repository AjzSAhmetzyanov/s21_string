#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <limits.h>

#include "s21_string.h"
#include "s21_sprintf.h"

#test s21_memchr_test
    char str1[] = "123456abc";
    char ch1 = '3';
    ck_assert_ptr_eq(s21_memchr(str1, ch1, 5), memchr(str1, ch1, 5));
    char str2[] = "123456abc";
    char ch2 = '7';
    ck_assert_ptr_eq(s21_memchr(str2, ch2, 9), memchr(str2, ch2, 9));

#test s21_memcmp_test
    char str1[15] = "123456abc";                 
    char str2[25] = "123456abc";
    ck_assert_int_eq(s21_memcmp(str2, str1, 9), memcmp(str2, str1, 9));
    char str3[15] = "123456";
    char str4[25] = "123456abc";
    ck_assert_int_eq(s21_memcmp(str4, str3, 9), memcmp(str4, str3, 9));
    char str5[15] = "123456abc";
    char str6[25] = "123456";
    ck_assert_int_eq(s21_memcmp(str6, str5, 9), memcmp(str6, str5, 9));

#test s21_memcpy_test
    char str1[15] = "123456abc";
    char str2[20] = "";
    ck_assert_str_eq(s21_memcpy(str2, str1, 7), memcpy(str2, str1, 7));
    char str3[15] = "123456";
    char str4[20] = "";
    ck_assert_str_eq(s21_memcpy(str4, str3, 9), memcpy(str4, str3, 9));
    char str5[15] = "123456abc";
    char str6[20] = "123";
    ck_assert_str_eq(s21_memcpy(str6, str5, 9), memcpy(str6, str5, 9));

#test s21_memmove_test_1
    char str1[15] = "123456abc";
    char str2[15] = "";
    ck_assert_str_eq(s21_memmove(str2, str1, 7), memmove(str2, str1, 7));

#test s21_memmove_test_2
    char str1[15] = "123456abcdefgh";
    char str2[16] = "1234567890abcdn";
    ck_assert_str_eq(s21_memmove(str2, str1, 15), memmove(str2, str1, 15));

#test s21_memset_test
    char str1[15] = "";
    ck_assert_str_eq(s21_memset(str1, '1', 5), memset(str1, '1', 5));
    char str2[15] = "1234erwer";
    ck_assert_ptr_eq(s21_memset(str2, '2', 8), memset(str2, '2', 8));
    
#test s21_strcat_test_1
    char str1[] = "123456abc";
    char str2[25] = "";
    ck_assert_str_eq(s21_strcat(str2, str1), strcat(str2, str1));

#test s21_strcat_test_2
    char str1[] = "126abc";
    char str2[35] = "dawawd";
    ck_assert_str_eq(s21_strcat(str2, str1), strcat(str2, str1));

#test s21_strncat_test
    char str1[15] = "123456abc";
    char str2[15] = "";
    ck_assert_str_eq(s21_strncat(str2, str1, 4), strncat(str2, str1, 4));

#test s21_strchr_test
    char str1[15] = "123456abc";
    ck_assert_ptr_eq(s21_strchr(str1, '3'), strchr(str1, '3'));
    char str2[15] = "12345";
    ck_assert_ptr_eq(s21_strchr(str2, '6'), strchr(str2, '6'));
    char str3[15] = "";
    ck_assert_ptr_eq(s21_strchr(str3, '6'), strchr(str3, '6'));

#test s21_strcmp_test_1
    char str1[] = "123456abc";
    char str2[] = "";
    ck_assert_int_eq(s21_strcmp(str2, str1), strcmp(str2, str1));

#test s21_strcmp_test_2
    char str1[] = "123456abc";
    char str2[] = "123456abc";
    ck_assert_int_eq(s21_strcmp(str2, str1), strcmp(str2, str1));

#test s21_strncmp_test_1
    char str1[] = "123456abc";
    char str2[] = "";
    ck_assert_int_eq(s21_strncmp(str2, str1, 5), strncmp(str2, str1, 5));

#test s21_strncmp_test_2 
    char str1[] = "123456abc";
    char str2[] = "123456abc";
    ck_assert_int_eq(s21_strncmp(str2, str1, 7), strncmp(str2, str1, 7));

#test s21_strcpy_test_1
    char str1[15] = "12345";
    char str2[15] = "";
    ck_assert_str_eq(s21_strcpy(str2, str1), strcpy(str2, str1));
    char str3[15] = "";
    char str4[15] = "12345";
    ck_assert_str_eq(s21_strcpy(str4, str3), strcpy(str4, str3));
    char str5[15] = "12345";
    char str6[15] = "234";
    ck_assert_str_eq(s21_strcpy(str6, str5), strcpy(str6, str5));

#test s21_strncpy_test_1
    char str1[] = "123456abc";
    char str2[15] = "";
    ck_assert_str_eq(s21_strncpy(str2, str1, 7), strncpy(str2, str1, 7));

#test s21_strncpy_test_2
    char str1[10] = "12345\0006789";
    char str2[10] = "1111111111";
    ck_assert_str_eq(s21_strncpy(str2, str1, 7), strncpy(str2, str1, 7));

#test s21_strcspn_test_1
    char str1[15] = "123456abc";
    char str2[15] = "";
    ck_assert_int_eq(s21_strcspn(str2, str1), strcspn(str2, str1));

#test s21_strcspn_test_2
    char str1[15] = "123456abc";
    char str2[15] = "a6";
    ck_assert_int_eq(s21_strcspn(str2, str1), strcspn(str2, str1));

#test s21_strerror_test
    ck_assert_str_eq(s21_strerror(1), strerror(1));
    ck_assert_str_eq(s21_strerror(150), strerror(150));

#test s21_strlen_test
    char str1[15] = "123456abc";
    ck_assert_int_eq(s21_strlen(str1), strlen(str1));
    char str2[15] = "";
    ck_assert_int_eq(s21_strlen(str2), strlen(str2));
    char str3[15] = "\nfsef";
    ck_assert_int_eq(s21_strlen(str3), strlen(str3));

#test s21_strpbrk_test_1
    char str1[15] = "123456abc";
    char str2[15] = "";
    ck_assert_ptr_eq(s21_strpbrk(str2, str1), strpbrk(str2, str1));

#test s21_strpbrk_test_2
    char str1[15] = "123456abc";
    char str2[15] = "c4b";
    ck_assert_str_eq(s21_strpbrk(str2, str1), strpbrk(str2, str1));

#test s21_strpbrk_test_3
    char s1[15]="hello world";
    char s2[15]="exfd";
    ck_assert_ptr_eq(strpbrk(s1,s2),s21_strpbrk(s1,s2));

#test s21_strpbrk_test_4
    char s1[15]="0123456789";
    char s2[15]="44223";
    ck_assert_ptr_eq(strpbrk(s1,s2),s21_strpbrk(s1,s2));

#test s21_strpbrk_test_5
    char s1[15]="it's test";
    char s2[15]="exit";
    ck_assert_ptr_eq(strpbrk(s1,s2),s21_strpbrk(s1,s2));

#test s21_strrchr_test_1
    char str1[15] = "123456abc123";
    char ch1 = '1';
    ck_assert_ptr_eq(s21_strrchr(str1, ch1), strrchr(str1, ch1));

#test s21_strrchr_test_2
    char s1[15]="012345678";
    char ch1='6';
    ck_assert_ptr_eq(strrchr(s1,ch1),s21_strrchr(s1,ch1));

#test s21_strrchr_test_3
    char s1[15]="012345678";
    char ch1='2';
    ck_assert_ptr_eq(strrchr(s1,ch1),s21_strrchr(s1,ch1));

#test s21_strrchr_test_4
    char s1[15]="012345678";
    char ch1='8';
    ck_assert_ptr_eq(strrchr(s1,ch1),s21_strrchr(s1,ch1));

#test s21_strspn_test_1
    char str1[15] = "123456abc";
    char str2[15] = "";
    ck_assert_int_eq(s21_strspn(str2, str1), strspn(str2, str1));

#test s21_strspn_test_2
    char s1[15]="012345678";
    char s2[15]="210";
    ck_assert_int_eq(strspn(s1,s2),s21_strspn(s1,s2));

#test s21_strspn_test_3
    char s1[15]="012345678";
    char s2[15]="8765";
    ck_assert_int_eq(strspn(s1,s2),s21_strspn(s1,s2));

#test s21_strspn_test_4
    char s1[15]="012345678";
    char s2[15]="456";
    ck_assert_int_eq(strspn(s1,s2),s21_strspn(s1,s2));

#test s21_strstr_test_1
    char str1[15] = "123456abc";
    char str2[15] = "12";
    ck_assert_str_eq(s21_strstr(str1, str2), strstr(str1, str2));
    char str3[15] = "123456abc";
    char str4[15] = "we";
    ck_assert_ptr_null(s21_strstr(str3, str4)); /* delet */
    char str5[15] = "123456abc";
    char str6[15] = "";
    ck_assert_str_eq(s21_strstr(str5, str6), strstr(str5, str6));

#test s21_strstr_test_2
    char s1[15]="012345678";
    char s2[15]="210";
    ck_assert_ptr_eq(strstr(s1,s2),s21_strstr(s1,s2));

#test s21_strstr_test_3
    char s1[15]="012345678";
    char s2[15]="345";
    ck_assert_ptr_eq(strstr(s1,s2),s21_strstr(s1,s2));

#test s21_strstr_test_4
    char s1[15]="012345678";
    char s2[15]="901";
    ck_assert_ptr_eq(s21_strstr(s1,s2), strstr(s1, s2));

#test s21_strtok_test_1
    char str1[30] = "test1/test2/test3/test4";
    char str2[5] = "/";
    ck_assert_str_eq(s21_strtok(str1, str2), strtok(str1, str2));
    char str3[30] = "test1/test2/test3/test4";
    char str4[5] = "/t";
    ck_assert_str_eq(s21_strtok(str3, str4), strtok(str3, str4));

#test s21_strtok_test_2
    char s1[30]="test1/test2/test3/test4";
    char s2[15]="/";
    ck_assert_ptr_eq(strtok(s1,s2),s21_strtok(s1,s2));

#test s21_strtok_test_3
    char s1[30]="test10test20test30test4";
    char s2[15]="0";
    ck_assert_ptr_eq(strtok(s1,s2),s21_strtok(s1,s2));

#test s21_strtok_test_4
    char s1[30]="343156718781564";
    char s2[10]="1";
    ck_assert_ptr_eq(strtok(s1,s2),s21_strtok(s1,s2));

#test s21_strtok_test_5
    char s1[5]="\0";
    char s2[5]="1";
    ck_assert_ptr_eq(strtok(s1,s2),s21_strtok(s1,s2));

#test s21_to_upper_test
    char str1[15] = "qwer";
    ck_assert_str_eq(s21_to_upper(str1), "QWER");
    char str2[15] = "12drg345";
    ck_assert_str_eq(s21_to_upper(str2), "12DRG345");
    char *str3 = s21_to_upper("");
    char *str4 = "";
    ck_assert_str_eq(str3, str4);
    free(str3);


#test s21_lower_test
    char str1[15] = "QWER";
    ck_assert_str_eq(s21_to_lower(str1), "qwer");
    char str2[15] = "12DRE345";
    ck_assert_str_eq(s21_to_lower(str2), "12dre345");
    char *str3 = s21_to_lower("\0");
    char *str4 = "";
    ck_assert_str_eq(str3, str4);
    free(str3);

#test s21_insert_test
    char str1[15] = "aq";
    ck_assert_str_eq(s21_insert(str1, "sffs", 1), "asffsq");
    char str2[15] = "";
    ck_assert_ptr_eq(s21_insert(str2, "sffs", 1), S21_NULL);
    char str3[15] = "qwerqwer";
    ck_assert_str_eq(s21_insert(str3, "yes", 5), "qwerqyeswer");
    char str4[15] = "no";
    ck_assert_ptr_eq(s21_insert(str4, S21_NULL, 5), S21_NULL);

#test s21_trim_test_1
    char *mass1 = s21_trim("hello", "h");
    char *mass2 = "ello";
    ck_assert_str_eq(mass1, mass2);
    free(mass1);

#test s21_trim_test_2
    char *mass3 = s21_trim("nosok", "sok");
    char *mass4 = "n";
    ck_assert_str_eq(mass3, mass4);
    free(mass3);

#test s21_trim_test_3
    char *mass5 = s21_trim("", "123");
    char *mass6 = "";
    ck_assert_str_eq(mass5, mass6);
    free(mass5);

#test s21_trim_test_4
    char *mass7 = s21_trim("1", "new");
    char *mass8 = "1";
    ck_assert_str_eq(mass7, mass8);
    free(mass7);

#test s21_sprintf_test
    char str1[150] = "";
    char str2[150] = "";
    char buf1[60]="";
    char buf2[60]="";
    ck_assert_int_eq(s21_sprintf(str1, "%*.*d %d % f %+-*d %% %*.*s %.*i %*c %-*lu\n",9,6, 2888, -286, 4.0,6, 100,8, 3, "Hello", 7, 45674,8,'Q',7, 5555555555), sprintf(str2,"%*.*d %d % f %+-*d %% %*.*s %.*i %*c %-*lu\n",9,6, 2888, -286, 4.0,6, 100,8, 3, "Hello", 7, 45674,8,'Q',7, 5555555555));
    int l1 = s21_sprintf(str1, "%+*d", 6, 534);
    int l2 = sprintf(str2, "%+*d", 6, 534);
    ck_assert_int_eq(l1, l2);
    ck_assert_str_eq(str1, str2);
    printf("%s\n", buf1);
    printf("%s\n", buf2);
    int l3 = s21_sprintf(buf1, "%.*d %d % f %+-*d %% ", 6, 2888, -286, 4.0,6, 100);
    int l4 = sprintf(buf2, "%.*d %d % f %+-*d %% ", 6, 2888, -286, 4.0,6, 100);
    ck_assert_int_eq(l3, l4);
    ck_assert_str_eq(buf1, buf2);
    ck_assert_int_eq(s21_sprintf(buf1, str1, 10), sprintf(buf1, str1, 10));
    
#test s21_sprintf_test2
    char c[255] = {}, d[255] = {};
    int n = 2100, n1 = 0, n2 = -21;
    short sh = 123, sh1 = -123;
    long int lg = 12345678912345, lg1 = -12345678912345;
    s21_sprintf(c, "%d %d %d %hd %hd %ld %ld %10ld", n, n1, n2, sh, sh1, lg,
                lg1, lg1);
    sprintf(d, "%d %d %d %hd %hd %ld %ld %10ld", n, n1, n2, sh, sh1, lg, lg1,
            lg1);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test3
    char c[255] = {}, d[255] = {};
    int n = 2100, n2 = -21;
    s21_sprintf(c, "%10d %+3d %+10d %+-10d %+-10d % -10d %-10d %-10d", n,
                212121, 2121, n2, n, 21, 55, -55);
    sprintf(d, "%10d %+3d %+10d %+-10d %+-10d % -10d %-10d %-10d", n, 212121,
            2121, n2, n, 21, 55, -55);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test4
    char c[255] = {}, d[255] = {};
    int n = 2100, n2 = -21;
    s21_sprintf(c, "%-10d %10d %10d %*d %2d", 21, n2, n, 10, n, n2);
    sprintf(d, "%-10d %10d %10d %*d %2d", 21, n2, n, 10, n, n2);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test5
    char c[255] = {}, d[255] = {}, x1 = 't';
    int n = 2100, n2 = -21;
    s21_sprintf(
        c, "%.*d %3.10d %.d %-+.5d %-+10.5d %.10d %.10d %2.2d %.d % d %.0d", 10,
        n, n2, 42, 21, 10, n, n2, -21, x1, 21, -42);
    sprintf(d, "%.*d %3.10d %.d %-+.5d %-+10.5d %.10d %.10d %2.2d %.d % d %.0d",
            10, n, n2, 42, 21, 10, n, n2, -21, x1, 21, -42);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test6
    char c[255] = {}, d[255] = {};
    s21_sprintf(c, "%d %d %d %d %d %ld %ld", INT_MIN, INT_MAX, SHRT_MAX,
                SHRT_MIN, USHRT_MAX, LONG_MAX, LONG_MIN);
    sprintf(d, "%d %d %d %d %d %ld %ld", INT_MIN, INT_MAX, SHRT_MAX, SHRT_MIN,
            USHRT_MAX, LONG_MAX, LONG_MIN);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test7
    char c[255] = {}, d[255] = {};
    s21_sprintf(c, "%c %10c %-10c", '!', 'a', 'b');
    sprintf(d, "%c %10c %-10c", '!', 'a', 'b');
    ck_assert_str_eq(c, d);
#test s21_sprintf_test8
    char c[255] = {}, d[255] = {};
    s21_sprintf(c, "%c %c %c", CHAR_MAX, CHAR_MIN, UCHAR_MAX);
    sprintf(d, "%c %c %c", CHAR_MAX, CHAR_MIN, UCHAR_MAX);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test9
    char c[255] = {}, d[255] = {};
    s21_sprintf(c, "%s %10s %-10s %-3s %.s %.3s %.10s", "hello", "hello",
                "hello", "hello", "hello", "hello", "hello");
    sprintf(d, "%s %10s %-10s %-3s %.s %.3s %.10s", "hello", "hello", "hello",
            "hello", "hello", "hello", "hello");
    ck_assert_str_eq(c, d);
#test s21_sprintf_test21
    char c[255] = {}, d[255] = {};
    s21_sprintf(c, "%u %lu", UINT_MAX, ULONG_MAX);
    sprintf(d, "%u %lu", UINT_MAX, ULONG_MAX);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test28
    char c[255] = {}, d[255] = {};
    float f = 21.21, f1 = -21.21;
    s21_sprintf(c, "%+.1f %.2f %.3f %.4f %10.5f %10.5f %-10.3f %-10.2f", f, f1,
                21.21, -21.21, 42.42, -42.42, f, f1);
    sprintf(d, "%+.1f %.2f %.3f %.4f %10.5f %10.5f %-10.3f %-10.2f", f, f1,
            21.21, -21.21, 42.42, -42.42, f, f1);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test29
    char c[255] = {}, d[255] = {};
    float f = 21.21, f1 = -21.21;
    s21_sprintf(c, "% 10f % 10f %f %.0f %.0f %.0f %.0f %f %10f", f, f1, 21.,
                21.21, 0.0, 21.21, 21., 0.0, 21.21);
    sprintf(d, "% 10f % 10f %f %.0f %.0f %.0f %.0f %f %10f", f, f1, 21.,
            21.21, 0.0, 21.21, 21., 0.0, 21.21);
    ck_assert_str_eq(c, d);
#test s21_sprintf_test31
    char c[255] = {}, d[255] = {};
    float f = 21.21, f1 = -21.21;
    ck_assert_int_eq(
        s21_sprintf(c, "% 10f % 10f %f %.0f %.0f %.0f %.0f %f %10f", f, f1,
                    21., 21.21, 0.0, 21.21, 21., 0.0, 21.21),
        sprintf(d, "% 10f % 10f %f %.0f %.0f %.0f %.0f %f %10f", f, f1, 21.,
                21.21, 0.0, 21.21, 21., 0.0, 21.21));
